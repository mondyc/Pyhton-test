"""模块"""

# 模块的概念
# 模块是Python程序架构的一个核心概念
# 每一个以扩展名py结尾的Python源代码文件都是一个模块
# 模块名同样也是一个标识符，需要符合标识符的命名规则
# 在模块中定义的全局变量、函数、类都是提供给外界直接使用的工具
# 模块就好比是工具包，要想使用这个工具包中的工具，就需要先导入这个模块

# 1．Python源代码文件就是一个模块
# 2．模块中定义的变量函数类,都可以让别人使用,同样,可以使用别人定义的(好处:别人定义好的不需要我们再次书写,直接使用即可)
# 3．想要使用别人的模块中的内容工具(变量，类，函数)，必须先导入模块才可以
# 4．我们自己写的代码,想要作为模块使用,代码的名字需要满足标识符的规则(由数字,字母下划线组成,不能以数字开头)

# 导入模块
# 语法1：
# import 模块名
# # 使用模块中的内容
# 模块名.工具名
#
# 举例：
# import random
# import json
# random.randint(a,b)
# json.load()
# json.dump()

import random

print(random.randint(1, 20))

# 语法2： 快捷方式是 红色破浪线内容，导包 Alt + 回车
# from 模块名 import 工具名
# 使用
# 工具名 # 如果是函数和类需要加括号
#
# 举例：
# from random import randint
# from json import load,dump
# load()
# dump()

from random import randint

print(randint(1, 20))

# 语法3： 问题:可能存在多个模块中有相同的名字的工具,会产生冲突
# from 模块名 import * # 将模块中所哟的内容都导入
# from random import *
# from json import *
#
# randint(a,b)
# load()
# dump()

from random import *

print(randint(1, 20))

# 别名 补充：
# 对于导入的模块和工具可以使用as关键字给其起别名注意:如果起别名,原来的名字就不能用了，只能使用别名

print('-----------------------------------------------------------')

# 模块的查找顺序
# 在导入模块的时候会先在当前目录中找模块，如果找到，就直接使用如果没有找到回去系统的目录中进行查找，找到,直接使用
# 没有找到，报错
# 注意点:
# 定义代码文件的时候，你的代码名字不能和你要导入的模块名字相同

print('-----------------------------------------------------------')

# __name__的作用
# 1．每个代码文件都是一个模块
# 2．在导入模块的时候，会执行模块中的代码(三种方法都会)
# 3．__name__变量
# 3.1 __name__变量是python 解释器自动维护的变量
# 3.2 __name__变量，如果代码是直接运行，值是__main__
# 3.3 __name__变量，如果代码是被导入执行，值是模块名(即代码文件名)

'''
# 导入的包数据
# 凡是在导入的时候不想执行的代码，都可以if判断里面
if __name__== "__main__": #
    # 调用函数
    print('在代码中调用函数')
    print(add(1,2))
    print(add(10,20))
    print('tools : ',__name__)
'''

# 需求,调用tools模块中的add 函数,进行求和计算
import tools  # 导入模块,执行tools模块中的代码

print(tools.add(100, 200))
