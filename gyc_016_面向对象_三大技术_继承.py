'''继承'''
# 1．继承描述的是类与类之间的关系
# 2．继承的好处：减少代码的冗余(相同的代码不需要多次重复书写)，可以直接使用

# 语法：
# class 类名(父类名):
#     pass

# 案例：
# class A: #没有写父类,但也有父类，object，object类是 Python中最顶级(原始)的类
#     pass
# class A(B):
#     pass

# 1．A类，称为是父类(基类)
# 2．B类，称为是子类(派生类)
# 单继承：一个类只继承一个父类，称为单继承
# 继承之后的特点：
#     >子类(B)继承父类(A)之后，子类的对象可以直接使用父类中定义的公有属性和方法

'''
1．定义一个动物类，吃
2．定义一个狗类，继承动物类，吃，叫
3．定义一个哮天犬类，继承狗类
'''


# 1．定义一个动物类，吃
class Animal:
    def eat(self):
        print('要吃东西')


# 2．定义一个狗类，继承动物类，吃，叫
class Dog(Animal):
    def bark(self):
        print('汪汪汪')


# 3．定义一个哮天犬类，继承狗类
class XTQ(Dog):
    pass


# #创建动物类的对象
# ani = Animal()
# ani.eat()

# #创建狗类对象
# dog = Dog()
# dog.eat()
# dog.bark()

# 创建哮天犬类对象
xtq = XTQ()
xtq.bark()  # 讽用父类Dog类的方法
xtq.eat()  # 寸以调用父类的父类中的方法

# 结论：
# python中对象.方法()调用方法
# 1．现在自己的类中的去找有没有这个方法如果有，直接调用
# 2．如果没有去父类中查找，如果有，直接调用
# 3．如果没有，去父类的父类中查找，如果有直接调用
# 4 ...
# 5．如果object类中有，直接调用，如果没有，代码报错

print('-----------------------------------------------------------')


# 重写

# 重写:在子类中定义了和父类中名字相同的方法，就是重写
# 重写的原因:父类中的方法，不能满足子类对象的需求，所以重写
# 重写之后的特点:调用子类字节的方法，不再调用父类中的方法
# 重写的方式:
#     >1．覆盖(父类中功能完全抛弃，不要,重写书写)
#     >2．扩展(父类中功能还调用，只是添加一些新的功能)（使用较多）

# 覆盖
# 1．直接在子类中定义和父类中名字相同的方法
# 2．直接在方法中书写新的代码

class Dog:
    def bark(self):
        print('汪汪汪叫.....')


class XTQ(Dog):
    # XTQ类bark方法不再是汪汪汪叫,改为嗷嗷嗷叫pass
    def bark(self):
        print('嗷嗷嗷叫.....')
        pass


xtq = XTQ()
xtq.bark()


# 扩展父类中的功能
# 1．直接在子类中定义和父类中名字相同的方法
# 2．在合适的地方调用父类中方法 super().方法()
# 3．书写添加的新功能

class Dog1:
    def bark(self):
        print('汪汪汪叫.....')


class XTQ1(Dog1):
    # XTQ类bark方法不再是汪汪汪叫，改为
    # 1．先嗷嗷嗷叫(新功能)2．汪汪汪叫(父类中功能)3．嗷嗷嗷叫(新功能)
    def bark(self):
        print('嗷嗷嗷叫.....')
        # 调用父类中的代码
        super().bark()  # print()如果父类中代码有多行呢?
        print('嗷嗷嗷叫.....')


xtq1 = XTQ1()
xtq1.bark()
