'''变量的进阶'''

a = 1  # 将数据1 的地址存到a对应的内存中
print('a: ', id(a))

b = a  # 将变量α中的引用保存到变量b
print('b: ', id(b))
a = 10  # 将数据10的地址保存到α对应的地址，即a的引用变了
print('a: ', id(a))
print('b: ', id(b))

my_list = [1, 2, 3]
my_list1 = [1, 2, 3]

print('my_list : ', id(my_list), id(my_list[1]))
print('my_list1: ', id(my_list1))
my_list[1] = 10
print(my_list)
print('my_list : ', id(my_list), id(my_list[1]))

my_tuple = (1, 2, [3, 4])  # 元组中存储的是1的地址，2的地址，和列表的地址#元组中的数据不能改变,是值这个三个地址不能改变
print(my_tuple, id(my_tuple[-1]))
my_tuple[-1][0] = 10  # 修改的是列表中下标为0的位置的引用地址，列表的地址没变，元组中的内容没有变化
print(my_tuple, id(my_tuple[-1]))

'''
https://www.bilibili.com/video/BV11g411V7Kf
软件测试第三篇_接口测试_超详细教程_哔哩哔哩_bilibili
P34-36 后面忘记的话，需要多看几遍
'''
print('-----------------------------------------------------------')

# 交换两个变量的值
# 使用第三个变量
# 方法1：
a = 10
b = 20
c = a
a = b
b = c
print(a, b)

# 不使用第三个变量
# 方法2：
a = a + b
b = a - b
a = a - b
print(a, b)

# 重点掌握！！！(主要依赖于组包和拆包)
# 方法3：
a, b = b, a
print(a, b)

# 组包和拆包
# 组包pack：讲多个数据使用逗号链接，组成元组
c = b, a
print(type(c), c)

# 拆包unpack：将容器中的数据值使用多个变量分别保存的过程,
#   注意:变量的个数和容器中数据的个数要保持—致
a, b = c
print(a, b)

x, y, z = [1, 2, 3]
print(x, y, z)

print('-----------------------------------------------------------')


# 局部变量和全局变量
# 变量：根据变量的定义位置，可以讲变量分为局部变量和全局变量

# 局部变量：在函数内部（函数的缩进中）定义的变量，称为局部变量
# 特点：
# 1．局部变量只能在当前函数内部使用，不能在其他函数和函数外部使用
# 2．在不同函数中,可以定义名字相同的局部变量，两者之间没有影响
# 3．生存周期(生命周期，作用范围）-->在哪里，能用
# 在函数被调用的时候,局部变量被创建，函数调用结束，局部变量的值被销毁(删除)，不能使用
# 所以函数中的局部变量的值，如果想要在函数外部使用，需要使用return关键字，将这个值进行返回

def func1():
    num = 10
    print(f"func1 函数中{num}")


def func2():
    num = 100
    print(f"func2 函数中{num}")


func1()
func2()

# 全局变量：在函数外包定义的变量，称为是 全局变量
# 特点:
# 1．可以在任何函数中读取(获取)全局变量的值
# 2．如何在函数中存在和全局变量名字相同的局部变量，在函数中使用的是局部变量的值（就近）
# 3．在函数内部想要修改全局变量的引用，需要添加global关键字，对变量进行声明为全局变量
# 4．生命周期
#     代码执行的时候被创建，代码执行结束,被销毁(删除)


gun = 10


def func3():
    print(f"func3 函数中{gun}")


def func4():
    gun = 20
    print(f"func4 函数中{gun}")


func3()
func4()


def func5():
    global gun  # 这个函数中使用的gun 都是全局变量
    gun = 30
    print(f"func4 函数中{gun}")


# func5()
# func3()
print(gun)
